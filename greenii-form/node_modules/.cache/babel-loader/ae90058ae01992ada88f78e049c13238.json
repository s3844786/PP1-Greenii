{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatISO;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\n\nfunction formatISO(date, options) {\n  var _options$format, _options$representati;\n\n  (0, _index3.default)(1, arguments);\n  var originalDate = (0, _index.default)(date);\n\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = (0, _index2.default)(originalDate.getDate(), 2);\n    var month = (0, _index2.default)(originalDate.getMonth() + 1, 2);\n    var year = (0, _index2.default)(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = (0, _index2.default)(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = (0, _index2.default)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = (0, _index2.default)(originalDate.getHours(), 2);\n    var minute = (0, _index2.default)(originalDate.getMinutes(), 2);\n    var second = (0, _index2.default)(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}\n\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","formatISO","_index","_interopRequireDefault","require","_index2","_index3","obj","__esModule","date","options","_options$format","_options$representati","arguments","originalDate","isNaN","getTime","RangeError","format","String","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","concat","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","floor","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join","module"],"sources":["/Users/derek/Desktop/Coding/React/greenii-form/node_modules/date-fns/formatISO/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatISO;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nfunction formatISO(date, options) {\n  var _options$format, _options$representati;\n\n  (0, _index3.default)(1, arguments);\n  var originalDate = (0, _index.default)(date);\n\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = (0, _index2.default)(originalDate.getDate(), 2);\n    var month = (0, _index2.default)(originalDate.getMonth() + 1, 2);\n    var year = (0, _index2.default)(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = (0, _index2.default)(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = (0, _index2.default)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = (0, _index2.default)(originalDate.getHours(), 2);\n    var minute = (0, _index2.default)(originalDate.getMinutes(), 2);\n    var second = (0, _index2.default)(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}\n\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}