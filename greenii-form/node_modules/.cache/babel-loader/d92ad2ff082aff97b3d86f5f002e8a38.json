{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDistanceStrict;\n\nvar _index = require(\"../_lib/defaultOptions/index.js\");\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../compareAsc/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../_lib/cloneObject/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../_lib/assign/index.js\"));\n\nvar _index7 = _interopRequireDefault(require(\"../_lib/defaultLocale/index.js\"));\n\nvar _index8 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale, _options$roundingMeth;\n\n  (0, _index8.default)(2, arguments);\n  var defaultOptions = (0, _index.getDefaultOptions)();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index7.default;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = (0, _index3.default)(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = (0, _index6.default)((0, _index5.default)(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = (0, _index4.default)(dirtyBaseDate);\n    dateRight = (0, _index4.default)(dirtyDate);\n  } else {\n    dateLeft = (0, _index4.default)(dirtyDate);\n    dateRight = (0, _index4.default)(dirtyBaseDate);\n  }\n\n  var roundingMethod = String((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : 'round');\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = (0, _index2.default)(dateRight) - (0, _index2.default)(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var defaultUnit = options === null || options === void 0 ? void 0 : options.unit;\n  var unit;\n\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(defaultUnit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && defaultUnit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}\n\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","formatDistanceStrict","_index","require","_index2","_interopRequireDefault","_index3","_index4","_index5","_index6","_index7","_index8","obj","__esModule","MILLISECONDS_IN_MINUTE","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","dirtyDate","dirtyBaseDate","options","_ref","_options$locale","_options$roundingMeth","arguments","defaultOptions","getDefaultOptions","locale","formatDistance","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","roundingMethod","String","roundingMethodFn","Math","floor","ceil","round","milliseconds","getTime","minutes","timezoneOffset","dstNormalizedMinutes","defaultUnit","unit","seconds","roundedMinutes","hours","days","months","years","module"],"sources":["/Users/derek/Desktop/Coding/React/greenii-form/node_modules/date-fns/formatDistanceStrict/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDistanceStrict;\n\nvar _index = require(\"../_lib/defaultOptions/index.js\");\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../compareAsc/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../_lib/cloneObject/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../_lib/assign/index.js\"));\n\nvar _index7 = _interopRequireDefault(require(\"../_lib/defaultLocale/index.js\"));\n\nvar _index8 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale, _options$roundingMeth;\n\n  (0, _index8.default)(2, arguments);\n  var defaultOptions = (0, _index.getDefaultOptions)();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index7.default;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = (0, _index3.default)(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = (0, _index6.default)((0, _index5.default)(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = (0, _index4.default)(dirtyBaseDate);\n    dateRight = (0, _index4.default)(dirtyDate);\n  } else {\n    dateLeft = (0, _index4.default)(dirtyDate);\n    dateRight = (0, _index4.default)(dirtyBaseDate);\n  }\n\n  var roundingMethod = String((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : 'round');\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = (0, _index2.default)(dateRight) - (0, _index2.default)(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var defaultUnit = options === null || options === void 0 ? void 0 : options.unit;\n  var unit;\n\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(defaultUnit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && defaultUnit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}\n\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}